knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/Coding/Methods 3/week_05")
pacman::p_load(tidyverse, lme4, MuMIn)
df <-
list.files(pattern = "*.csv") %>%
map_df(~read_csv(.))
View(df)
df$seed <- as.factor(df$seed)
levels(df$seed)
View(df)
#Encode them appropriately
df$trial <- as.numeric(df$trial)
df$trial.type <- as.factor(df$trial.type)
df$pas <- as.factor(df$pas)
df$target.contrast <- as.numeric(df$target.contrast)
df$cue <- as.factor(df$cue)
df$task <- as.factor(df$task)
df$target.type <- as.factor(df$target.type)
df$rt.subj <- as.numeric(df$rt.subj)
df$rt.obj <- as.numeric(df$rt.obj)
df$obj.resp <- as.factor(df$obj.resp)
#Anonymize subjects (also facilitates later analysis if the subjects are represented only by numbers)
df$subject <- as.numeric(df$subject)
df$subject <- as.factor(df$subject)
levels(df$subject)
unique(df$seed)
check_na <- df %>% filter(seed == NA)
View(check_na)
check_na <- df %>% filter(seed == 'NA')
View(check_na)
df <- df %>%
filter(trial.type != "practice")
df$correct <- ifelse((df$target.type == "odd" & df$obj.resp == "o") | (df$target.type == "even" & df$obj.resp == "e"), 1, 0)
df$correct <- as.factor(df$correct) #encoded as "factor" because encoding as "logical" changes values to "TRUE" and "FALSE", which is not suitable for running and plotting logistic regression
unique(df$target.contrast)
unique(df$target.frames)
df$target.frames <- as.numeric(df$target.frames)
model_5.1a <- glmer(correct ~ target.frames, data = df)
model_5.1a <- glm(correct ~ target.frames, data = df)
unique(df$correct)
model_5.1a <- glm(correct ~ target.frames, data = df)
model_5.1a <- glm(correct ~ target.frames, data = df, family = 'binomial')
model_5.1b <- glmer(correct ~ target.frames + (1 | subject), data = df, family = 'binomial')
summary(model_5.1b)
summary(model_5.1b)
fitted(model_5.1b)
View(model_5.1b)
y(model_5.1b)
View(model_5.1b)
likelihood <- function(groundtruth, fitted_values) {
#obtain probability by taking inverse logit of fitted values
probability <- inv.logit(fitted_values)
#put two columns of values into dataframe
y_and_p <- data.frame(y = groundtruth, p = probability)
#run the function for each row
L_values <- NA
for (row in nrow(y_and_p)){
L <- p^y * (1 - p)^(1 - y)
cbind(L_values, L)
}
#take the product of all rows in the vector
product <- prod(L_values)
#give an output
return(product)
}
likelihood(df$correct, fitted(model_5.1b))
pacman::p_load(tidyverse, lme4, MuMIn, boot)
likelihood(df$correct, fitted(model_5.1b))
likelihood <- function(groundtruth, fitted_values) {
#obtain probability by taking inverse logit of fitted values
probability <- inv.logit(fitted_values)
#put two columns of values into dataframe
y_and_p <- data.frame(y = groundtruth, p = probability)
#run the function for each row
L_values <- NA
for (row in nrow(y_and_p)){
L <- y_and_p$p ^ y_and_p$y * (1 - y_and_p$p) ^ (1 - y_and_p$y)
cbind(L_values, L)
}
#take the product of all rows in the vector
product <- prod(L_values)
#give an output
return(product)
}
likelihood(df$correct, fitted(model_5.1b))
#give an output
return(product)
likelihood <- function(groundtruth, fitted_values) {
#obtain probability by taking inverse logit of fitted values
probability <- inv.logit(fitted_values)
#put two columns of values into dataframe
y_and_p <- data.frame(y = groundtruth, p = probability)
y_and_p$y <- as.numeric(y_and_p$y)
#run the function for each row
L_values <- NA
for (row in nrow(y_and_p)){
L <- y_and_p$p ^ y_and_p$y * (1 - y_and_p$p) ^ (1 - y_and_p$y)
cbind(L_values, L)
}
#take the product of all rows in the vector
product <- prod(L_values)
#give an output
return(product)
}
likelihood(df$correct, fitted(model_5.1b))
likelihood <- function(groundtruth, fitted_values) {
#obtain probability by taking inverse logit of fitted values
probability <- inv.logit(fitted_values)
#put two columns of values into dataframe
y_and_p <- data.frame(y = groundtruth, p = probability)
y_and_p$y <- as.numeric(y_and_p$y)
#run the function for each row
L_values <- 0
for (row in nrow(y_and_p)){
L <- (y_and_p$p ^ y_and_p$y * (1 - y_and_p$p) ^ (1 - y_and_p$y))
cbind(L_values, L)
}
#take the product of all rows in the vector
product <- prod(L_values)
#give an output
return(product)
}
likelihood(df$correct, fitted(model_5.1b))
likelihood <- function(groundtruth, fitted_values) {
#obtain probability by taking inverse logit of fitted values
probability <- inv.logit(fitted_values)
#put two columns of values into dataframe
y_and_p <- data.frame(y = groundtruth, p = probability)
y_and_p$y <- as.numeric(y_and_p$y)
#run the function for each row
L_values <- 0
for (row in nrow(y_and_p)){
L <- (y_and_p$p ^ y_and_p$y * (1 - y_and_p$p) ^ (1 - y_and_p$y))
cbind(L_values, L)
}
#take the product of all rows in the vector
product <- prod(L_values)
#give an output
return(L_values)
}
likelihood(df$correct, fitted(model_5.1b))
likelihood <- function(groundtruth, fitted_values) {
#obtain probability by taking inverse logit of fitted values
probability <- inv.logit(fitted_values)
#put two columns of values into dataframe
y_and_p <- data.frame(y = groundtruth, p = probability)
y_and_p$y <- as.numeric(y_and_p$y)
#run the function for each row
L_values <- NA
for (row in nrow(y_and_p)){
L <- (y_and_p$p ^ y_and_p$y * (1 - y_and_p$p) ^ (1 - y_and_p$y))
L_values <- cbind(L_values, L)
}
#take the product of all rows in the vector
product <- prod(L_values)
#give an output
return(L_values)
}
likelihood(df$correct, fitted(model_5.1b))
likelihood <- function(groundtruth, fitted_values) {
#obtain probability by taking inverse logit of fitted values
probability <- inv.logit(fitted_values)
#put two columns of values into dataframe
y_and_p <- data.frame(y = groundtruth, p = probability)
y_and_p$y <- as.numeric(y_and_p$y)
#run the function for each row
L_values <- 0
for (row in nrow(y_and_p)){
L <- (y_and_p$p ^ y_and_p$y * (1 - y_and_p$p) ^ (1 - y_and_p$y))
L_values <- cbind(L_values, L)
}
#take the product of all rows in the vector
product <- prod(L_values)
#give an output
return(L_values)
}
likelihood(df$correct, fitted(model_5.1b))
likelihood <- function(groundtruth, fitted_values) {
#obtain probability by taking inverse logit of fitted values
probability <- inv.logit(fitted_values)
#put two columns of values into dataframe
y_and_p <- data.frame(y = groundtruth, p = probability)
y_and_p$y <- as.numeric(y_and_p$y)
#run the function for each row
L_values <- 0
for (row in nrow(y_and_p)){
L <- (y_and_p$p ^ y_and_p$y) * ((1 - y_and_p$p) ^ (1 - y_and_p$y))
L_values <- rbind(L_values, L)
}
#take the product of all rows in the vector
product <- prod(L_values)
#give an output
return(L_values)
}
likelihood(df$correct, fitted(model_5.1b))
likelihood <- function(groundtruth, fitted_values) {
#obtain probability by taking inverse logit of fitted values
probability <- inv.logit(fitted_values)
#put two columns of values into dataframe
y_and_p <- data.frame(y = groundtruth, p = probability)
y_and_p$y <- as.numeric(y_and_p$y)
#run the function for each row
L_values <- NA
for (row in nrow(y_and_p)){
L <- (y_and_p$p ^ y_and_p$y) * ((1 - y_and_p$p) ^ (1 - y_and_p$y))
L_values <- rbind(L_values, L)
}
#take the product of all rows in the vector
product <- prod(L_values)
#give an output
return(L_values)
}
likelihood(df$correct, fitted(model_5.1b))
likelihood <- function(groundtruth, fitted_values) {
#obtain probability by taking inverse logit of fitted values
probability <- inv.logit(fitted_values)
#put two columns of values into dataframe
y_and_p <- data.frame(y = groundtruth, p = probability)
y_and_p$y <- as.numeric(y_and_p$y)
#run the function for each row
L_values <- c()
for (row in nrow(y_and_p)){
L_values[row] <- (y_and_p$p ^ y_and_p$y) * ((1 - y_and_p$p) ^ (1 - y_and_p$y))
}
#take the product of all rows in the vector
product <- prod(L_values)
#give an output
return(L_values)
}
likelihood(df$correct, fitted(model_5.1b))
likelihood <- function(groundtruth, fitted_values) {
#obtain probability by taking inverse logit of fitted values
probability <- inv.logit(fitted_values)
#put two columns of values into dataframe
y_and_p <- data.frame(y = groundtruth, p = probability)
y_and_p$y <- as.numeric(y_and_p$y)
#run the function for each row
L_values <- c()
for (row in nrow(y_and_p)){
L_values[row] <- (y_and_p$p[row] ^ y_and_p$y[row]) * ((1 - y_and_p$p[row]) ^ (1 - y_and_p$y[row]))
}
#take the product of all rows in the vector
product <- prod(L_values)
#give an output
return(L_values)
}
likelihood(df$correct, fitted(model_5.1b))
likelihood <- function(groundtruth, fitted_values) {
#obtain probability by taking inverse logit of fitted values
p <- inv.logit(fitted_values)
#put two columns of values into dataframe
y <- as.numeric(groundtruth)
#run the function for each row
L_values <- c()
for (row in length(p)){
L_values[row] <- (p[row] ^ y[row]) * ((1 - p[row]) ^ (1 - y[row]))
}
#take the product of all rows in the vector
product <- prod(L_values)
#give an output
return(L_values)
}
likelihood(df$correct, fitted(model_5.1b))
likelihood <- function(groundtruth, fitted_values) {
#obtain probability by taking inverse logit of fitted values
p <- inv.logit(fitted_values)
#put two columns of values into dataframe
y <- as.numeric(groundtruth)
#run the function for each row
L_values <- c()
for (row in 1:length(p)){
L_values[row] <- (p[row] ^ y[row]) * ((1 - p[row]) ^ (1 - y[row]))
}
#take the product of all rows in the vector
product <- prod(L_values)
#give an output
return(L_values)
}
likelihood(df$correct, fitted(model_5.1b))
likelihood <- function(groundtruth, fitted_values) {
#obtain probability by taking inverse logit of fitted values
p <- inv.logit(fitted_values)
#put two columns of values into dataframe
y <- as.numeric(groundtruth) - 1
#run the function for each row
L_values <- c()
for (row in 1:length(p)){
L_values[row] <- (p[row] ^ y[row]) * ((1 - p[row]) ^ (1 - y[row]))
}
#take the product of all rows in the vector
product <- prod(L_values)
#give an output
return(L_values)
}
likelihood(df$correct, fitted(model_5.1b))
likelihood <- function(groundtruth, fitted_values) {
#obtain probability by taking inverse logit of fitted values
p <- inv.logit(fitted_values)
#put two columns of values into dataframe
y <- as.numeric(groundtruth) - 1
#run the function for each row
L_values <- c()
for (row in 1:length(p)){
L_values[row] <- (p[row] ^ y[row]) * ((1 - p[row]) ^ (1 - y[row]))
}
#take the product of all rows in the vector
product <- prod(L_values)
#give an output
return(product)
}
likelihood(df$correct, fitted(model_5.1b))
