)
Samples_left <- Samples %>%
filter(EyeUsed == "Left") %>%
select(!RightGazeX & !RightGazeY & !RightPupilSize) %>%
rename(
PositionX = LeftGazeX,
PositionY = LeftGazeY,
PupilSize = LeftPupilSize
)
#Rebind.
Samples <- rbind(Samples_right, Samples_left)
Samples$PositionX <- as.numeric(Samples$PositionX) / 100
Samples$PositionY <- as.numeric(Samples$PositionY) / 100
Samples$PupilSize <- as.numeric(Samples$PupilSize) / 100
Samples$Time <- as.numeric(Samples$Time) / 100
Fixations$PositionX <- as.numeric(Fixations$PositionX) / 100
Fixations$PositionY <- as.numeric(Fixations$PositionY) / 100
Fixations$PupilSize <- as.numeric(Fixations$PupilSize) / 100
Saccades$StartX <- as.numeric(Saccades$StartX) / 100
Saccades$StartY <- as.numeric(Saccades$StartY) / 100
Saccades$EndX <- as.numeric(Saccades$EndX) / 100
Saccades$EndY <- as.numeric(Saccades$EndY) / 100
write_csv(Samples, "Samples_STUDYGROUP_7.csv")
write_csv(Fixations, "Fixations_STUDYGROUP_7.csv")
write_csv(Saccades, "Saccades_STUDYGROUP_7.csv")
require(knitr)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, readr, rstudioapi)
setwd("~/GitHub/Perception and Action")
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 1000L) #force 1000 columns of data to be shown
library(usethis)
use_git_config(user.name = "Alina Kereszt", user.email = "kereszt98@gmail.com")
library(usethis)
library(usethis)
use_git_config(user.name = "Alina Kereszt", user.email = "kereszt98@gmail.com")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/Coding/Methods 3/week_01")
pacman::p_load(tidyverse)
data(mtcars)
par(font.lab=2, font.axis=2, cex=1.2)
plot(mpg ~ wt, data=mtcars, xlab='Weight (lb/1000)', ylab='Miles/(US) gallon',
main='Scatter plot', ylim=c(0, 40))
view(mtcars)
model <- lm(formula = mpg ~ wt, data = mtcars)
summary(model)
?model.matrix
model.matrix(model, data = mtcars)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/Coding/Methods 3/week_01")
pacman::p_load(tidyverse)
data(mtcars)
par(font.lab=2, font.axis=2, cex=1.2)
plot(mpg ~ wt, data=mtcars, xlab='Weight (lb/1000)', ylab='Miles/(US) gallon',
main='Scatter plot', ylim=c(0, 40))
model.matrix(model, data = mtcars) #... didn't really help, only showed the design matrix
coefficients <- model$coefficients #estimated coefficients
y_hat <- model$fitted.values #y values based on model's predictions
y_groundtruth <- mtcars$mpg #actual values of y
residuals <- model$residuals #error (epsilon)
#OR: residuals = y_hat - y_groundtruth
coefficients
residuals
y_hat
plot1 <- plot(mtcars$mpg, model$fitted.values)
df <- data.frame(y_hat, y_groundtruth)
df <- data.frame(mtcars$wt, y_hat, y_groundtruth)
View(df)
df <- data.frame(wt = mtcars$wt, y_hat, y_groundtruth) #collect data for plots into single dataframe
df <- data.frame(wt = mtcars$wt, y_hat, y_groundtruth, residuals) #collect data for plots into single dataframe
ggplot(df, aes(x = wt, y = residuals)) +
geom_abline(intercept = 0, slope = 0) +
geom_segment(aes(xend = wt, yend = 0+0*wt)) +
geom_point() +
theme_minimal()
# y and y_hat shown as linear regression
ggplot(df, aes(x = wt, y = mpg)) +
geom_smooth(method = lm, se = FALSE, color = 'black') +
geom_segment(aes(xend = wt, yend = yhat)) +
geom_point() +
theme_minimal()
# y and y_hat shown as linear regression
ggplot(df, aes(x = wt, y = y_groundtruth)) +
geom_smooth(method = lm, se = FALSE, color = 'black') +
geom_segment(aes(xend = wt, yend = yhat)) +
geom_point() +
theme_minimal()
# y and y_hat shown as linear regression
ggplot(df, aes(x = wt, y = y_groundtruth)) +
geom_smooth(method = lm, se = FALSE, color = 'black') +
geom_segment(aes(xend = wt, yend = y_hat)) +
geom_point() +
theme_minimal()
design_matrix <- model.matrix(model, data = mtcars) #design matrix
design_matrix
design_matrix <- model.matrix(model, data = mtcars) #design matrix
coefficients <- model$coefficients #estimated coefficients
y_hat <- model$fitted.values #y values based on model's predictions
y_groundtruth <- mtcars$mpg #actual values of y
residuals <- model$residuals #error (epsilon)
#OR: residuals = y_hat - y_groundtruth
df <- data.frame(wt = mtcars$wt, y_hat, y_groundtruth, residuals) #collect data for plots into single dataframe
ggplot(df, aes(x = wt, y = residuals)) +
geom_abline(intercept = 0, slope = 0) +
geom_segment(aes(xend = wt, yend = 0+0*wt)) +
geom_point() +
theme_minimal()
# y and y_hat shown as linear regression
ggplot(df, aes(x = wt, y = y_groundtruth)) +
geom_smooth(method = lm, se = FALSE, color = 'black') +
geom_segment(aes(xend = wt, yend = y_hat)) +
geom_point() +
theme_minimal()
class(design_matrix)
beta_hat <- solve(t(design_matrix) %*% design_matrix) %*% t(design_matrix) %*% y_groundtruth
beta_hat
design_matrix
designmatrix$x_sq <- designmatrix$wt**2
design_matrix$x_sq <- design_matrix$wt**2
design_matrix <- as.data.frame(design_matrix)
design_matrix$x_sq <- design_matrix$wt**2
design_matrix <- as.matrix(design_matrix) #We need to convert it back to a matrix in order to perform matrix operations on it
design_matrix
beta_hat <- solve(t(design_matrix) %*% design_matrix) %*% t(design_matrix) %*% y_groundtruth
beta_hat
model2 <- lm(mpg ~ wt + I(wt^2), data = mtcars)
summary(model2)
y_hat2 <- model2$fitted.value
mtcars2 <- data.frame(mtcars, y_hat2)
View(mtcars2)
residuals2 <- model2$residuals
mtcars2 <- data.frame(mtcars, y_hat2, residuals2)
mtcars2 <- data.frame(mtcars, y_hat, y_hat2, residuals, residuals2)
ggplot(mtcars,aes(x = wt, y = mpg)) +
geom_point() +
stat_smooth(method = "lm", formula = y ~ x, se = FALSE, color = 'lightblue' ) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), se = FALSE, color = 'orange', size = 1) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2) + I(x^3), se = FALSE, color = 'darkgreen', size = .5) +
theme_minimal()
View(mtcars)
logistic.model <- glm(formula = am ~ wt, data = mtcars, family = 'binomial)
logistic.model <- glm(formula = am ~ wt, data = mtcars, family = 'binomial')
logistic.model <- glm(formula = am ~ wt, data = mtcars, family = 'binomial')
summary(logistic.model)
plogis(logistic.model$fitted.values)
predictors <- logistic.model$linear.predictors
predictors
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/Coding/Methods 3/week_02")
pacman::p_load(tidyverse, rsq, lmerTest, MuMIn)
politeness <- read.csv('politeness.csv') ## read in data
# Remove NAs
politeness <- na.exclude(politeness$f0mn)
view(politeness)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/Coding/Methods 3/week_02")
pacman::p_load(tidyverse, rsq, lmerTest, MuMIn)
politeness <- read.csv('politeness.csv') ## read in data
# Remove NAs
politeness <- politeness %>%
na.exclude(f0mn)
view(politeness)
F1 <- politeness %>%
filter(subject == "F1") # filter for subject _F1_
class(F1$scenario) #check data format of _scenario_ - "integer"
# Remove NAs for cleanliness and because some functions cannot handle them
politeness <- politeness %>%
na.exclude(f0mn)
# While in some cases it may be appropriate to replace NAs with the mean value of the variable, here it is NOT - the datapoints are not independent of each other!!!
# Ensure correct data format
politeness$subject <- as.factor(politeness$subject)
politeness$gender <- as.factor(politeness$gender)
politeness$scenario <- as.factor(politeness$scenario)
politeness$attitude <- as.factor(politeness$attitude)
F1 <- politeness %>%
filter(subject == "F1") # filter for subject _F1_
class(F1$scenario) #check data format of _scenario_ - "integer"
scenario2 <- as.factor(F1$scenario) #copy _scenario_ as integer
model1 <- lm(f0mn ~ scenario, data = F1) #model where _scenario_ is factor
model2 <- lm(f0mn ~ scenario2, data = F1) #model where _scenario_ is integer
summary(model1)
summary(model2)
X1 <- model.matrix(model1, data = F1)
X2 <- model.matrix(model2, data = F1)
X1
X2
F1 <- politeness %>%
filter(subject == "F1") # filter for subject _F1_
class(F1$scenario) #check data format of _scenario_ - "factor"
scenario2 <- as.integerF1$scenario) #copy _scenario_ as integer
F1 <- politeness %>%
filter(subject == "F1") # filter for subject _F1_
class(F1$scenario) #check data format of _scenario_ - "factor"
scenario2 <- as.integer(F1$scenario) #copy _scenario_ as integer
model1 <- lm(f0mn ~ scenario, data = F1) #model where _scenario_ is factor
model2 <- lm(f0mn ~ scenario2, data = F1) #model where _scenario_ is integer
summary(model1)
summary(model2)
X1 <- model.matrix(model1, data = F1)
X2 <- model.matrix(model2, data = F1)
X1
X2
ggplot(data = politeness, aes(x = scenario, y = f0mn)) +
geom_point(aes(colour = attitude)) +
facet_wrap(~ subject) +
theme_minimal()
m1 <- lm(f0mn ~ gender, data = politeness)
m2 <- lmer(f0mn ~ gender + (1 | scenario), data = politeness)
m3 <- lmer(f0mn ~ gender + (1 | subject), data = politeness)
m4 <- lmer(f0mn ~ gender + (1 | scenario) + (1 | subject), data = politeness)
# Residual standard deviation of the models:
summary(m1)$sigma
summary(m2)$sigma
summary(m3)$sigma
summary(m4)$sigma
# AIC of the models:
AIC(m1, m2, m3, m4)
# Residual standard deviation of the models:
c(summary(m1)$sigma,
summary(m2)$sigma,
summary(m3)$sigma,
summary(m4)$sigma)
# AIC of the models:
AIC(m1, m2, m3, m4)
c(MuMIn::r.squaredGLMM(m2),
MuMIn::r.squaredGLMM(m3)
)
rsq(m2)
rsq(m3)
qqnorm(residuals(m1))
qqline(residuals(m1))
qqnorm(residuals(badmodel))
badmodel <- lm(f0mn ~ gender, data = baddata)
baddata <- politeness %>%
group_by(subject, gender) %>%
summarize(f0mn = mean(f0mn))
badmodel <- lm(f0mn ~ gender, data = baddata)
qqnorm(residuals(m1))
qqline(residuals(m1))
qqnorm(residuals(badmodel))
qqline(residuals(badmodel))
qqnorm(residuals(m4))
qqline(residuals(m4))
qqnorm(residuals(m4))
qqline(residuals(m4))
ggplot(data = politeness, aes(x = scenario, y = f0mn, color = attitude)) +
geom_point() +
geom_point(aes(x = scenario, y = fitted(m4)), color = "black", shape = 18)+
facet_wrap(~subject)
ggplot(data = politeness, aes(x = scenario, y = f0mn, color = attitude)) +
geom_point() +
geom_point(aes(x = scenario, y = fitted(m4)), color = "black")+
facet_wrap(~subject)
fixef(m4)
ranef(m4)
fixef(m4)
fitted(m4)
fixef(m4)
ranef(m4)
fitted(m4)
fixef(m4)
ranef(m4)
# E.g.: F1 is female. To find the fitted value for her pitch in the 1st scenario, one would take:
fittedF1 <- fixef(m4)[1] + ranef(m4)$subject[,1][1] + ranef(m4)$scenario[,1][1]
fittedF1
# The fitted values for a model can be found using the following function:
fitted(m4)
# The fitted values for a model can be found using the following function:
fitted(m4)
# Alternatively, one might first take the intercept. Then, by adding or subtracting the applicable fixed and random effects, the fitted value for each participant in each scenario may be found.
fixef(m4)
ranef(m4)
# E.g.: F1 is female. To find the fitted value for her pitch in the 1st scenario, one would take:
fittedF1 <- fixef(m4)[1] + ranef(m4)$subject[,1][1] + ranef(m4)$scenario[,1][1]
fittedF1
#Plotted:
ggplot(data = politeness, aes(x = scenario, y = f0mn, color = attitude)) +
geom_point() +
geom_point(aes(x = scenario, y = fitted(m4)), color = "black")+
facet_wrap(~subject)
m5 <- lmerTest::lmer(f0mn ~ gender + attitude + (1 | scenario) + (1 | subject), data = politeness)
summary(m5)
m6 <- lmerTest::lmer(f0mn ~ gender + attitude + gender * attitude + (1 | scenario) + (1 | subject), data = politeness)
summary(m6)
interaction.plot(politeness$gender, politeness$attitude, politeness$f0mn)
# Residual variance:
var(resid(m4))
sd(resid(m4))
# Residual variance:
res_var <- c(var(resid(m4)),
var(resid(m5)),
var(resid(m6))
)
# Residual standard deviation
res_sd <- c(summary(m4)$sigma,
summary(m5)$sigma,
summary(m6)$sigma
)
# AIC scores
aic <- AIC(m4, m5, m6)
comparison <- as.data.frame(res_var, res_sd, aic)
comparison
# Residual variance:
c(var(resid(m4)),
var(resid(m5)),
var(resid(m6))
)
# Residual standard deviation
c(summary(m4)$sigma,
summary(m5)$sigma,
summary(m6)$sigma
)
# AIC scores
AIC(m4, m5, m6)
anova(m4, m5, m6)
# Residual variance:
c(var(resid(m4)),
var(resid(m5)),
var(resid(m6))
)
# Residual standard deviation
c(summary(m4)$sigma,
summary(m5)$sigma,
summary(m6)$sigma
)
# AIC scores
AIC(m4, m5, m6)
anova(m4, m5, m6)
# Residual variance:
c(summary(m4)$sigma^2,
summary(m5)$sigma^2,
summary(m6)$sigma^2
)
# Residual standard deviation
c(summary(m4)$sigma,
summary(m5)$sigma,
summary(m6)$sigma
)
# AIC scores
AIC(m4, m5, m6)
anova(m4, m5, m6)
qqnorm(residuals(m5))
qqline(residuals(m5))
setwd("~/GitHub/Coding/Methods 3/week_03")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/Coding/Methods 3/week_03")
pacman::p_load(tidyverse)
df <-
list.files(pattern = "*.csv") %>%
map_df(~read_csv(.))
View(df)
#Encode them appropriately
df$trial <- as.numeric(df$trial)
df$trial.type <- as.numeric(df$trial.type)
df$pas <- as.numeric(df$pas)
df$target.contrast <- as.numeric(df$target.contrast)
#df$cue
df$task <- as.factor(df$task)
df$target.type <- as.factor(df$target.type)
df$rt.subj <- as.numeric(df$rt.subj)
df$rt.obj <- as.numeric(df$rt.obj)
df$obj.resp <- as.factor(df$obj.resp)
df$subject <- as.factor(df$subject)
staircase <- df %>%
filter(trial.type == "staircase")
ggplot(data = staircase, aes(x = correct, y = target.contrast, color = attitude)) +
geom_point() +
facet_wrap(~subject) +
theme_minimal()
View(staircase)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/Coding/Methods 3/week_03")
pacman::p_load(tidyverse)
df <-
list.files(pattern = "*.csv") %>%
map_df(~read_csv(.))
df$correct <- ifelse((df$target.type == "odd" & df$obj.resp == "o") | (df$target.type == "even" & df$obj.resp == "e"), 1, 0)
df$correct <- as.logical(df$correct)
#Encode them appropriately
df$trial <- as.numeric(df$trial)
df$trial.type <- as.numeric(df$trial.type)
df$pas <- as.numeric(df$pas)
df$target.contrast <- as.numeric(df$target.contrast)
#df$cue
df$task <- as.factor(df$task)
df$target.type <- as.factor(df$target.type)
df$rt.subj <- as.numeric(df$rt.subj)
df$rt.obj <- as.numeric(df$rt.obj)
df$obj.resp <- as.factor(df$obj.resp)
df$subject <- as.factor(df$subject)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/Coding/Methods 3/week_03")
pacman::p_load(tidyverse)
df <-
list.files(pattern = "*.csv") %>%
map_df(~read_csv(.))
df$correct <- ifelse((df$target.type == "odd" & df$obj.resp == "o") | (df$target.type == "even" & df$obj.resp == "e"), 1, 0)
df$correct <- as.logical(df$correct)
#Encode them appropriately
df$trial <- as.numeric(df$trial)
df$trial.type <- as.factor(df$trial.type)
df$pas <- as.numeric(df$pas)
df$target.contrast <- as.numeric(df$target.contrast)
#df$cue
df$task <- as.factor(df$task)
df$target.type <- as.factor(df$target.type)
df$rt.subj <- as.numeric(df$rt.subj)
df$rt.obj <- as.numeric(df$rt.obj)
df$obj.resp <- as.factor(df$obj.resp)
df$subject <- as.factor(df$subject)
staircase <- df %>%
filter(trial.type == "staircase") #isolate staircasing data
ggplot(data = staircase, aes(x = correct, y = target.contrast, color = attitude)) +
geom_point() +
facet_wrap(~subject) +
theme_minimal()
ggplot(data = staircase, aes(x = correct, y = target.contrast)) +
geom_point() +
facet_wrap(~subject) +
theme_minimal()
ggplot(data = staircase, aes(x = correct, y = target.contrast)) +
geom_point(position = 'jitter', size = 1) +
facet_wrap(~subject) +
theme_minimal()
ggplot(data = staircase, aes(x = correct, y = target.contrast)) +
geom_point(position = 'jitter', size = 5) +
facet_wrap(~subject) +
theme_minimal()
ggplot(data = staircase, aes(x = correct, y = target.contrast)) +
geom_point(position = 'jitter', size = 0.5) +
facet_wrap(~subject) +
theme_minimal()
stair_model <- glmer(correct ~ target.contrast + (1 | Subject), family = gaussian(link = log), data = staircase)
pacman::p_load(tidyverse, lme4)
stair_model <- glmer(correct ~ target.contrast + (1 | Subject), family = gaussian(link = log), data = staircase)
stair_model <- glmer(correct ~ target.contrast + (1 | subject), family = gaussian(link = log), data = staircase)
stair_model <- glmer(correct ~ target.contrast + (1 | subject), family = gaussian, data = staircase)
summary(stair_model)
stair_model <- glm(correct ~ target.contrast, family = gaussian, data = staircase)
summary(stair_model)
ggplot(data = staircase, aes(x = correct, y = target.contrast)) +
geom_point(position = 'jitter', size = 0.5) +
geom_point(aes(y = fitted(stair_model)), color = "red") +
facet_wrap(~subject) +
theme_minimal()
ggplot(data = staircase, aes(x = correct, y = target.contrast)) +
geom_point(position = 'jitter', size = 0.5) +
geom_point(aes(y = fitted(stair_model)), color = "red", position = 'jitter') +
facet_wrap(~subject) +
theme_minimal()
ggplot(data = staircase, aes(x = correct, y = target.contrast)) +
geom_point(position = 'jitter', size = 0.5) +
geom_point(aes(y = fitted(stair_model)), color = "red", position = 'jitter', size = 0.5) +
facet_wrap(~subject) +
theme_minimal()
ggplot(data = staircase, aes(x = target.contrast, y = correct)) +
geom_point(position = 'jitter', size = 0.5) +
geom_point(aes(y = fitted(stair_model)), color = "red", position = 'jitter', size = 0.5) +
facet_wrap(~subject) +
theme_minimal()
plot(correct ~ trial.type, data = staircase, col = "steelblue")
exp <- df %>%
filter(trial.type == "experiment")
exp <- df %>%
filter(trial.type == "experiment")
View(exp)
# Isolate subjects
sub001 <- exp %>% filter(subject == "001")
sub005 <- exp %>% filter(subject == "005")
sub016 <- exp %>% filter(subject == "016")
sub020 <- exp %>% filter(subject == "020")
View(sub001)
int001 <- lm(rt.obj ~ 1, data = sub001)
int005 <- lm(rt.obj ~ 1, data = sub005)
int016 <- lm(rt.obj ~ 1, data = sub016)
int020 <- lm(rt.obj ~ 1, data = sub020)
qqnorm(residuals(int001))
qqline(residuals(int001))
qqnorm(residuals(int005))
qqline(residuals(int005))
qqnorm(residuals(int016))
qqline(residuals(int016))
qqnorm(residuals(int020))
qqline(residuals(int020))
View(int001)
sub001$log.rt.obj <- log(sub001$rt.obj)
sub005$log.rt.obj <- log(sub005$rt.obj)
sub016$log.rt.obj <- log(sub016$rt.obj)
sub020$log.rt.obj <- log(sub020$rt.obj)
log.int001 <- lm(log.rt.obj ~ 1, data = sub001)
log.int005 <- lm(log.rt.obj ~ 1, data = sub005)
log.int016 <- lm(log.rt.obj ~ 1, data = sub016)
log.int020 <- lm(log.rt.obj ~ 1, data = sub020)
# Plot residuals with Q-Q plots
qqnorm(residuals(log.int001))
qqline(residuals(log.int001))
qqnorm(residuals(log.int005))
qqline(residuals(log.int005))
qqnorm(residuals(log.int016))
qqline(residuals(log.int016))
qqnorm(residuals(log.int020))
qqline(residuals(log.int020))
pacman::p_load(tidyverse, lme4, lmerTest)
m1 <- lmerTest::lmer(rt.obj ~ task + (1 | subject), data = exp, REML = FALSE)
m2 <- lmerTest::lmer(rt.obj ~ task + pas + (1 | subject), data = exp, REML = FALSE)
m3 <- lmerTest::lmer(rt.obj ~ task + pas + trial + (1 | subject), data = exp, REML = FALSE)
m4 <- lmerTest::lmer(rt.obj ~ task + pas + correct + (1 | subject), data = exp, REML = FALSE)
summary(m1)
summary(m2)
summary(m3)
summary(m4)
anova(m1, m2, m3)
anova(m1, m2, m3, m4)
